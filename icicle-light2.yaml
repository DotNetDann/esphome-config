# -------------------------------------
# ---- Implemented on Mirabella Genio Icicle Controller ----
# -------------------------------------
substitutions:
  devicename: icicle_light2

esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp01_1m
#  includes:
#    - my_custom_component.h


wifi:
  #power_save_mode: light # power reduced from 1.2w to 0.8w
  #fast_connect: true
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    hidden: True
  manual_ip:
    static_ip: !secret ip_icicle_light2
    gateway: !secret ip_gateway
    subnet: 255.255.255.0
  domain: .homelan
  ap: # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: "${devicename} Hotspot"
    password: !secret password

captive_portal:

#mqtt:
#  broker: !secret mqtt_host
#  username: !secret mqtt_username
#  password: !secret mqtt_password
#  reboot_timeout: 0s # Dont reboot..

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret password
  reboot_timeout: 0s # Dont reboot..

ota:
  password: !secret password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret password


binary_sensor:
  - platform: gpio
    pin:
      number: GPIO5
      inverted: true
      mode: INPUT_PULLUP
    name: "${devicename} Button"
    on_press:
      then:
        - light.toggle: mainlight 


output:
  - platform: esp8266_pwm
    id: pina
    pin: GPIO14
  - platform: esp8266_pwm
    id: pinb
    pin: GPIO12

# https://esphome.io/api/classesphome_1_1light_1_1_light_color_values.html
light:
  - platform: hbridge
    id: mainlight
    name: "${devicename} Light"
    pin_a: pina
    pin_b: pinb
    effects:
    - lambda:
        name: Blink
        update_interval: 500ms
        lambda: |-
          static int state = 0;
          static float bright = 0;
          if (initial_run) {
            bright = id(mainlight).current_values.get_brightness();
          }

          auto call = id(mainlight).turn_on();
          if (state == 0) {
            call.set_brightness(bright);
            state = 1;
          } else {
            call.set_brightness(0);
            state = 0;
          }
          call.set_transition_length(0);
          call.perform();
    - lambda:
        name: Slide
        update_interval: 500ms
        lambda: |-
          static int state = 0;
          auto call = id(mainlight).make_call();
          call.set_state(true);
          if (state == 0) {
            call.set_color_temperature(153.0);
            state = 1;
          } else if (state == 1) {
            state = 2;
          } else if (state == 2) {
            call.set_color_temperature(500.0);
            state = 3;
          } else {
            state = 0;
          }
          call.set_transition_length(0.3);
          call.perform();
    - lambda:
        name: Chainsaw
        update_interval: 100ms
        lambda: |-
          static int state = 0;
          static float bright = 0;
          if (initial_run) {
            bright = id(mainlight).current_values.get_brightness();
          }

          bool change = false;
          auto call = id(mainlight).make_call();

          if (state == 0 || state == 10 || state == 20 || state == 30 || state == 40) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(153.0);
          }
          else if (state == 5 || state == 15 || state == 25 || state == 35 || state == 45) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(500.0);
          }
          else if (state == 50 || state == 52 || state == 54 || state == 56) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(153.0);
          }
          else if (state == 51 || state == 53 || state == 55 || state == 57) {
            change = true;
            call.set_brightness(0);
          }
          else if (state == 58 || state == 60 || state == 62 || state == 64) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(500.0);
          }
          else if (state == 59 || state == 61 || state == 63 || state == 65) {
            change = true;
            call.set_brightness(0);
          }

          state = state + 1;
          if (state > 65) {
            state = 0;
          }
          if (change) {
            call.set_state(true);
            call.set_transition_length(0);
            call.perform();
          }
    - lambda:
        name: InWave
        update_interval: 1s
        lambda: |-
          static int state = 0;
          auto call = id(mainlight).make_call();
          call.set_state(true);
          if (state == 0) {
            call.set_color_temperature(153.0);
            state = 1;
          } else if (state == 1) {
            call.set_color_temperature(500.0);
            state = 0;
          } else {
            state = 0;
          }
          call.set_transition_length(1000);
          call.perform();
#    - lambda:
#        name: Slow Glo
#        update_interval: 1s
#        lambda: |-
#          static int state = 0;
#          static float bright = 0;
#          if (initial_run) {
#            bright = id(mainlight).current_values.get_brightness();
#          }
#
#          auto call = id(mainlight).make_call();
#
#          if (state == 0) {
#            call.set_color_temperature(153.0);
#            call.set_brightness(0);
#            call.set_transition_length(0);
#            call.perform();
#
#            call.set_brightness(bright);
#          } else if (state == 2) {
#            call.set_color_temperature(500.0);
#            call.set_brightness(0);
#            call.set_transition_length(0);
#            call.perform();
#
#            call.set_brightness(bright);
#          } else if (state == 1 || state == 3) {
#            call.set_brightness(0);
#          }
#          
#          call.set_state(true);
#          call.set_transition_length(1000);
#          call.perform();
#
#          state = state + 1;
#          if (state > 3) {
#            state = 0;
#          }
    - lambda:
        name: Sequential
        update_interval: 150ms
        lambda: |-
          static int state = 0;
          static float bright = 0;
          if (initial_run) {
            bright = id(mainlight).current_values.get_brightness();
          }

          bool change = false;
          auto call = id(mainlight).make_call();

          if (state == 0 || state == 10 || state == 20 || state == 30 || state == 40) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(153.0);
          }
          else if (state == 5 || state == 15 || state == 25 || state == 35 || state == 45) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(500.0);
          }
          if (state == 50 || state == 54 || state == 58 || state == 62 || state == 66 || state == 70 || state == 74 || state == 78 || state == 82 || state == 86) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(153.0);
          }
          if (state == 52 || state == 56 || state == 60 || state == 64 || state == 68 || state == 72 || state == 76 || state == 80 || state == 84 || state == 88) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(500.0);
          }
          if (state == 89 || state == 91 || state == 93 || state == 95 || state == 97 || state == 99 || state == 101 || state == 103 || state == 105 || state == 107 || state == 109 || state == 111 || state == 113 || state == 115 || state == 117 || state == 119 || state == 121 || state == 123 || state == 125 || state == 127) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(153.0);
          }
          if (state == 90 || state == 92 || state == 94 || state == 96 || state == 98 || state == 100 || state == 102 || state == 104 || state == 106 || state == 108 || state == 110 || state == 112 || state == 114 || state == 116 || state == 118 || state == 120 || state == 122 || state == 124 || state == 126 || state == 128) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(500.0);
          }

          state = state + 1;
          if (state > 128) {
            state = 0;
          }
          if (change) {
            call.set_state(true);
            call.set_transition_length(0);
            call.perform();
          }          
    - lambda:
        name: Slow Fade
        update_interval: 3s
        lambda: |-
          static int state = 0;
          static float bright = 0;
          if (initial_run) {
            bright = id(mainlight).current_values.get_brightness();
          }

          auto call = id(mainlight).turn_on();
          if (state == 0) {
            call.set_brightness(bright);
            state = 1;
          } else {
            call.set_brightness(0);
            state = 0;
          }
          call.set_transition_length(3000); // = 3s
          call.perform();
    - lambda:
        name: Twinkle
        update_interval: 100ms
        lambda: |-
          static int state = 0;
          static float bright = 0;
          if (initial_run) {
            bright = id(mainlight).current_values.get_brightness();
          }

          bool change = false;
          auto call = id(mainlight).make_call();

          if (state == 0 || state == 2 || state == 4 || state == 6) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(153.0);
          }
          else if (state == 8 || state == 10 || state == 12 || state == 14) {
            change = true;
            call.set_brightness(bright);
            call.set_color_temperature(500.0);
          }
          else {
            change = true;
            call.set_brightness(0);
          }

          state = state + 1;
          if (state > 15) {
            state = 0;
          }
          if (change) {
            call.set_state(true);
            call.set_transition_length(0);
            call.perform();
          }

status_led:
  pin:
    number: GPIO4
#    inverted: yes