# -------------------------------------
# ---- Implemented on a D1 Mini in tesla ----
# -------------------------------------
#                        |---------|
#                        | D1 mimi |
#                    RST |         | GPIO1 TXD0
#                    ADC |         | GPIO3 RXD0
#                 GPIO16 |         | GPIO5
#        (Button) GPIO14 |         | GPIO4
#   (WS2812 LEDs) GPIO12 |         | GPIO0
#         (Opto)  GPIO13 |         | GPIO2
#                 GPIO15 |         | GND
#                   3.3V |---------| 5V
#
# 3.3v -> opto -> 1k GPIO13 -> 20k -> GND 
#
#
#Pin  What    Normal Color    Car cable Color
#--------------------------------------------
#1  Ambiant+                  Green Solid
#2  Ambiant-                  Green Stripe
#3  Spare                     Orange Stripe
#4  Led Data  Blue Solid      Orange Solid
#5  Button    Blue Stripe     Blue Stripe
#6  GND       Orange Solid    Brown Stripe
#7  5v        Brown Stripe    Brown Solid
#8  12v       Brown Solid     Blue Solid



substitutions:
  devicename: car-lighting

globals:
  - id: actual_effect
    type: int
    restore_value: no
    initial_value: '1'

esphome:
  name: ${devicename}
  platform: ESP8266
  board: nodemcuv2
  on_boot:
    priority: 650.0 #https://esphome.io/components/esphome.html
#    priority: 550.0
    then:
      - light.turn_on:
          id: leds
          effect: "Purple"


wifi:
  power_save_mode: high # power went from 0.36W to 0.18W. Dont really need wifi anyway for this
  fast_connect: true
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    hidden: True
  manual_ip:
    static_ip: !secret ip_car_lighting
    gateway: !secret ip_gateway
    subnet: 255.255.255.0
  domain: .homelan
  ap: # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: "${devicename} Hotspot"
    password: !secret password

captive_portal:

logger:
  level: WARN

ota:
  password: !secret password

api:
  password: !secret password
  reboot_timeout: 0s # Dont reboot..

web_server:
  port: 80
  auth:
    username: admin
    password: !secret password


light:
  - platform: status_led
    id: statled
    pin:
      number: GPIO2
      inverted: true

#  - platform: partition
#    name: "${devicename} Lights - Middle Bar"
#    id: ledmb
#    segments:
#      - id: leds
#        from: 8
#        to: 9
#
#  - platform: partition
#    name: "${devicename} Lights - Front Bar"
#    id: ledfb
#    segments:
#      - id: leds
#        from: 0
#        to: 0
#      - id: leds
#        from: 4
#        to: 4
#
#  - platform: partition
#    name: "${devicename} Lights - Front Footwell"
#    id: ledff
#    segments:
#      - id: leds
#        from: 1
#        to: 3
#      - id: leds
#        from: 5
#        to: 7
#
#  - platform: partition
#    name: "${devicename} Lights - Back Footwell"
#    id: ledff
#    segments:
#      - id: leds
#        from: 10
#        to: 13

  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO12
    num_leds: 14
    name: "${devicename} Lights"
    id: leds
    effects:
      - random:
          name: "Fast Random"
          transition_length: 4s
          update_interval: 5s
      - random:
          name: "Slow Random"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "Really Slow Random"
          transition_length: 90s
          update_interval: 90s
      - addressable_rainbow:
          width: 10
          speed: 10
#      - addressable_lambda:
#          name: "Red"
#          update_interval: 5s
#          lambda:
#            it.all() = ESPColor(255, 0, 0);      
      - lambda:
          name: "Red"
          update_interval: 5s
          lambda: |-
            auto call = id(leds).make_call();
            call.set_rgb(1.0, 0.0, 0.0);
            call.perform();
      - lambda:
          name: "Green"
          update_interval: 5s
          lambda: |-
            auto call = id(leds).make_call();
            call.set_rgb(0.0, 1.0, 0.0);
            call.perform();
      - lambda:
          name: "Blue"
          update_interval: 5s
          lambda: |-
            auto call = id(leds).make_call();
            call.set_rgb(0.0, 0.0, 1.0);
            call.perform();
      - lambda:
          name: "IceBlue" # https://convertingcolors.com/rgb-color-128_191_255.html?search=RGB(128,191,255)
          update_interval: 5s
          lambda: |-
            auto call = id(leds).make_call();
            call.set_rgb(0.5, 0.75, 1.0);
            call.perform();
      - lambda:
          name: "Purple" # https://convertingcolors.com/rgb-color-128_0_128.html?search=RGB(128,0,128)
          update_interval: 5s
          lambda: |-
            auto call = id(leds).make_call();
            call.set_rgb(0.5, 0, 0.5);
            call.perform();


sensor:
  - platform: duty_cycle
    id: footDuty
    name: "${devicename} Footwell Duty Cycle"
    pin:
      number: GPIO13
      inverted: false
      mode: INPUT
    update_interval: 2s
    on_value_range: # When value passes from outside a defined range of values to inside a range
      - below: 15.0
        then:
          - light.turn_off: leds
      - above: 30.0
        then:
          - light.turn_on: leds
    on_raw_value: # when a new value is received
      if:
        condition:
            and:
              - light.is_on: leds
              - sensor.in_range:
                  id: footDuty
                  below: 10.0
        then:
          - light.turn_off:
              id: leds


binary_sensor:
  - platform: gpio
    id: sidebutton
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: True
    name: "${devicename} Effect Button"
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.1s
        then:
          - lambda: |-
              auto call = id(leds).turn_on();
              if (id(actual_effect) == 0)
                call.set_effect("IceBlue");
              if (id(actual_effect) == 1)
                call.set_effect("Purple");
              if (id(actual_effect) == 2)
                call.set_effect("Red");
              if (id(actual_effect) == 3)
                call.set_effect("Green");
              if (id(actual_effect) == 4)
                call.set_effect("Blue");
              if (id(actual_effect) == 5)
                call.set_effect("Rainbow");
              if (id(actual_effect) == 6)
                call.set_effect("Slow Random");
                
              if (id(actual_effect) < 6) //Loop count
                id(actual_effect) += 1;
              else
                id(actual_effect) = 0;
              call.perform();
          - light.turn_on: statled
          - delay: 300ms
          - light.turn_off: statled

  
      - timing:
        - ON for at least 1.5s
        - OFF for at least 0.1s
        then:
          - light.turn_off: leds
          - light.turn_on: statled
          - delay: 200ms
          - light.turn_off: statled
          - delay: 200ms
          - light.turn_on: statled
          - delay: 200ms
          - light.turn_off: statled
#          - delay: 2s
#          - deep_sleep.enter:
#              id: deep_sleep_1
#              sleep_duration: 30s

#deep_sleep:
#  id: deep_sleep_1

