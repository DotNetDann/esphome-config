# -------------------------------------
# ---- Implemented on Sonoff RF bridge ----
# -------------------------------------
substitutions:
  devicename: 433_bridge

esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp01_1m

wifi:
  #power_save_mode: light # power reduced from 1.2w to 0.8w
  #fast_connect: true
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    hidden: True
  manual_ip:
    static_ip: !secret ip_433_bridge
    gateway: !secret ip_gateway
    subnet: 255.255.255.0
  domain: .homelan
  ap: # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: "${devicename} Hotspot"
    password: !secret password

captive_portal:

mqtt:
  broker: !secret mqtt_host
  username: !secret mqtt_username
  password: !secret mqtt_password
  reboot_timeout: 0s # Dont reboot..

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  password: !secret password
  reboot_timeout: 0s # Dont reboot..
  services:
    - service: send_rf_code
      variables:
        sync: int
        low: int
        high: int
        code: int
      then:
        - rf_bridge.send_code:
            sync: !lambda 'return sync;'
            low: !lambda 'return low;'
            high: !lambda 'return high;'
            code: !lambda 'return code;'
    - service: learn
      then:
        - rf_bridge.learn

ota:
  password: !secret password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret password


uart:
  tx_pin: GPIO01
  rx_pin: GPIO03
  baud_rate: 19200


globals:
  - id: rf_code
    type: char[10]

rf_bridge:
  on_code_received:
    then:
      - homeassistant.event:
          event: esphome.rf_code_received
          data:
            sync: !lambda 'char buffer [10];return itoa(data.sync,buffer,16);'
            low: !lambda 'char buffer [10];return itoa(data.low,buffer,16);'
            high: !lambda 'char buffer [10];return itoa(data.high,buffer,16);'
            code: !lambda 'char buffer [10];return itoa(data.code,buffer,16);'
      - mqtt.publish_json:
          topic: ${devicename}/received
          payload: !lambda |-
            char buffer1 [10];
            char buffer2 [10];
            char buffer3 [10];
            char buffer4 [10];
            root["sync"] = itoa(data.sync,buffer1,16);
            root["low"] = itoa(data.low,buffer2,16);
            root["high"] = itoa(data.high,buffer3,16);
            root["code"] = itoa(data.code,buffer4,16);
#          payload: |-
#            root["sync"] = lambda 'char buffer [10];return itoa(data.sync,buffer,16);'
#            root["low"] = lambda 'char buffer [10];return itoa(data.low,buffer,16);'
#            root["high"] = lambda 'char buffer [10];return itoa(data.high,buffer,16);'
#            root["code"] = lambda 'char buffer [10];return itoa(data.code,buffer,16);'
      - if:
          condition:
            lambda: |-
              return data.code == 0x6D8D11;
          then:
            - binary_sensor.template.publish:
                id: doorbell
                state: ON
            - delay: 5s
            - binary_sensor.template.publish:
                id: doorbell
                state: OFF

binary_sensor:
  - platform: status
    name: ${devicename} Status

  - platform: template
    name: ${devicename} Doorbell
    id: doorbell
    device_class: moving

  - platform: gpio
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: True
    name: ${devicename} Gate
    device_class: door
    filters:
     - delayed_on: 100ms
     - delayed_off: 100ms

  - platform: gpio
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
      inverted: True
    name: ${devicename} Back Garage
    device_class: garage_door
    filters:
     - delayed_on: 100ms
     - delayed_off: 100ms


status_led:
  pin:
    number: GPIO13
    inverted: yes
