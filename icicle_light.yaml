# -------------------------------------
# ---- Implemented on Mirabella Genio Icicle Controller ----
# -------------------------------------
substitutions:
  devicename: icicle_light

esphome:
  name: ${devicename}
  platform: ESP8266
  board: esp01_1m
#  includes:
#    - my_custom_component.h


wifi:
  #power_save_mode: light # power reduced from 1.2w to 0.8w
  #fast_connect: true
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
    hidden: True
  manual_ip:
    static_ip: !secret ip_icicle_light
    gateway: !secret ip_gateway
    subnet: 255.255.255.0
  domain: .homelan
  ap: # Enable fallback hotspot (captive portal) in case wifi connection fails
    ssid: "${devicename} Hotspot"
    password: !secret password

captive_portal:

#mqtt:
#  broker: !secret mqtt_host
#  username: !secret mqtt_username
#  password: !secret mqtt_password
#  reboot_timeout: 0s # Dont reboot..

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret password
  reboot_timeout: 0s # Dont reboot..

ota:
  password: !secret password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret password


#binary_sensor:
#  - platform: gpio
#   pin:
#      number: GPIO5
#      inverted: false???
#      mode: INPUT_PULLUP????
#   name: "Icicle Light Controller Button"


output:
  - platform: esp8266_pwm
    id: pina
    pin: GPIO14
  - platform: esp8266_pwm
    id: pinb
    pin: GPIO12


light:
  - platform: hbridge
    id: mainlight
    name: "Icicle Lights"
    pin_a: pina
    pin_b: pinb
    effects:
    - flicker:
    - lambda:
        name: Blink
        update_interval: 250ms
        lambda: |-
          static int state = 0;
          static float bright = id(mainlight).current_values.get_brightness();
          auto call = id(mainlight).turn_on();
          if (state == 0) {
            call.set_brightness(bright);
            state = 1;
          } else if (state == 1) {
            state = 2;
          } else {
            call.set_brightness(0);
            state = 0;
          }
          call.set_transition_length(0);
          call.perform();
    - lambda:
        name: Sequential
        update_interval: 1s
        lambda: |-
          static int state = 0;
          auto call = id(mainlight).turn_on();
          if (state == 0) {
            call.set_rgbw(0.0, 0.0, 0.0, 0.0);
            state = 1;
          } else {
            call.set_rgbw(0.0, 0.0, 0.0, 1.0);
            state = 0;
          }
          call.set_transition_length(0); // = 0s
          call.perform();
    - lambda:
        name: Sequential Waves
        update_interval: 3s
        lambda: |-
          static int state = 0;
          auto call = id(mainlight).turn_on();
          if (state == 0) {
            call.set_rgbw(0.0, 0.0, 0.0, 0.0);
            state = 1;
          } else {
            call.set_rgbw(0.0, 0.0, 0.0, 1.0);
            state = 0;
          }
          call.set_transition_length(3000); // = 3s
          call.perform();
    - lambda:
        name: Slow Glo
        update_interval: 3s
        lambda: |-
          static int state = 0;
          static float bright = id(mainlight).current_values.get_brightness();
          auto call = id(mainlight).turn_on();
          if (state == 0) {
            call.set_rgbw(0.0, 0.0, 0.0, 0.0);
            call.set_transition_length(0);
            call.perform();
            call.set_brightness(bright);
          } else if (state == 1) {
            call.set_brightness(0);
          } else if (state == 2) {
            call.set_rgbw(0.0, 0.0, 0.0, 1.0);
            call.set_transition_length(0);
            call.perform();
            call.set_brightness(bright);
          } else {
            call.set_brightness(0);
          }
          call.set_transition_length(3000); // = 3s
          call.perform();
          state += 1;
          if (state == 4)
            state = 0;
    - lambda:
        name: Slow Fade
        update_interval: 3s
        lambda: |-
          static int state = 0;
          static float bright = id(mainlight).current_values.get_brightness();
          auto call = id(mainlight).turn_on();
          if (state == 0) {
            call.set_brightness(bright);
            state = 1;
          } else {
            call.set_brightness(0);
            state = 0;
          }
          call.set_transition_length(3000); // = 3s
          call.perform();

status_led:
  pin:
    number: GPIO4
#    inverted: yes